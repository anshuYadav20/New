Tutorial: LIST ,TUPLE,SETS
ype "help", "copyright", "credits" or "license" for more information.
>>> course=[1,2,3,4,5]
>>> print(course[2])
3
>>> #way to create list
>>> print(course[2:])
[3, 4, 5]
>>> print(course[0:2])
[1, 2]
>>> #[2:4] is known as slicing
>>> #list method to modify our list
>>> # 1.Append-add item to the end of list
>>> course.append(6)
>>> print(course)
[1, 2, 3, 4, 5, 6]
>>> #2. To insert value at specific location take 2 argument 1.index where you want to insert 2. value you want to insert
>>> course.insert(2,87)
>>> print(course)
[1, 2, 87, 3, 4, 5, 6]
>>> #3. we used this method when we want to add muliple value to the list
>>>
 #3. we used this method when we want to add muliple value to the list
>>> course2=[2,36]
>>> course.insert(2,course2)
>>> print(course) #insert added whole list course2 not each individual value it is like list within the list
[1, 2, [2, 36], 87, 3, 4, 5, 6]
>>> course.extend(2,course2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list.extend() takes exactly one argument (2 given)
>>> course.extend(course2)
>>> print(course)
[1, 2, [2, 36], 87, 3, 4, 5, 6, 2, 36]
>>> #4.extend -keyword added list value individual
>>> course.append(course2)
>>> print(course) #added whole list
[1, 2, [2, 36], 87, 3, 4, 5, 6, 2, 36, [2, 36]]
>>> #-----Remove--------
>>> course.remove([2,36])
>>> print(course) #added whole list
[1, 2, 87, 3, 4, 5, 6, 2, 36, [2, 36]]
>>> #1.remove 2.pop->used to remove last value of list *important thing about pop its return value which we pop so we used a variable to store a value
>>> a=course(pop())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pop' is not defined. Did you mean: 'pow'?
>>> a=course.pop()
>>> print(course) #added whole list
[1, 2, 87, 3, 4, 5, 6, 2, 36]
>>> print(a)
[2, 36]
>>> #------------SORT A LIST----------
>>> # 1.reverse() a list
>>> print(course.reverse())
None
>>> course.reverse()
>>> print(course)
[1, 2, 87, 3, 4, 5, 6, 2, 36]
>>> course.reverse()
>>> print(course)
[36, 2, 6, 5, 4, 3, 87, 2, 1]
>>> #----Sort()-->to sort
>>> course.sort()
>>> print(course
... )
[1, 2, 2, 3, 4, 5, 6, 36, 87]
>>> #value sorted in ascending order
>>> #sort in descending order
>>> course.reverse()
>>> print(course)
[87, 36, 6, 5, 4, 3, 2, 2, 1]
>>> #1. way to reverse like this sort then reverse 2. use sort(reverse=true)
>>> course.sort(reverse=true) #sort in descending order
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'true' is not defined. Did you mean: 'True'?
>>> course.sort(reverse=True) #sort in descending order
>>> print(course)
[87, 36, 6, 5, 4, 3, 2, 2, 1]
>>> #now in this way our original list sorted what if we dont want to change our orinal list then use sorted() method
>>> sorted(course)
[1, 2, 2, 3, 4, 5, 6, 36, 87]
>>> print(course)
[87, 36, 6, 5, 4, 3, 2, 2, 1]
>>> so here we ,can clearly see it wont sort orinal list
  File "<stdin>", line 1
    so here we ,can clearly see it wont sort orinal list
       ^^^^
SyntaxError: invalid syntax
>>> #so here we ,can clearly see it wont sort orinal list
>>> #----to get min and max valu----
>>> print(min(course))
1
>>> print(max(course))
87
>>> print(sum(course))
146
>>> #---to find the index of certain value
>>> print(course.index(36))
1
>>> print(course.index(72))#if we try to find a value which is not there then we get value error
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 72 is not in list
>>> #to check given value present in our list or not we use in method.
>>> print( 7 in course)
False
>>> print( 87 in course)
True
>>> for a in course:
... print(a)
  File "<stdin>", line 2
    print(a)
    ^
IndentationError: expected an indented block after 'for' statement on line 1
>>> for a in course:
...  print(a)
...
87
36
6
5
4
3
2
2
1
>>>
>>> #print statement goes to new line at each statement
>>> # BY DEFAULT print statement goes to new line at each statement
>>> #enumerate: function return two value index and value
>>> for a in enumerate(course):
...  print(course)
...
[87, 36, 6, 5, 4, 3, 2, 2, 1]
[87, 36, 6, 5, 4, 3, 2, 2, 1]
[87, 36, 6, 5, 4, 3, 2, 2, 1]
[87, 36, 6, 5, 4, 3, 2, 2, 1]
[87, 36, 6, 5, 4, 3, 2, 2, 1]
[87, 36, 6, 5, 4, 3, 2, 2, 1]
[87, 36, 6, 5, 4, 3, 2, 2, 1]
[87, 36, 6, 5, 4, 3, 2, 2, 1]
[87, 36, 6, 5, 4, 3, 2, 2, 1]
>>> for index, a in enumerate(course):
...  print(index,a)
...
0 87
1 36
2 6
3 5
4 4
5 3
6 2
7 2
8 1
>>> for index, a in enumerate(course,start=1):# to start at 1
...  print(index,a)
...
1 87
2 36
3 6
4 5
5 4
6 3
7 2
8 2
9 1
>>> #---JOIN-----
>>> Course='-'.join(course)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sequence item 0: expected str instance, int found
>>> Course='- '.join(course)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sequence item 0: expected str instance, int found
>>> Course='- '.join(course)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sequence item 0: expected str instance, int found
>>> new=['a','b','c']
>>> course=' -'.join(new)
>>> print(course)
a -b -c
>>> #work only for string if we want to remove added comma we use split() function.
>>> cours=course.split('-')
>>> print(cours)
['a ', 'b ', 'c']
>>>

>>>
>>>
>>> #------------------TUPLE-----------
>>> #we cannot modify tuple-immutable list are mutable means we can modify
>>> course=(1,2,3,4)
>>> a=course
>>> print(a)
(1, 2, 3, 4)
>>> print(course)
(1, 2, 3, 4)
>>> course.append(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'
>>> #we are getting error when try to change not many method as list as it is immutable
>>> # we cant append remove
>>> if you need something modified use list if you want only loop though and access use tuple
  File "<stdin>", line 1
    if you need something modified use list if you want only loop though and access use tuple
                                       ^^^^^^^^^^^
SyntaxError: expected 'else' after 'if' expression
>>> #if you need something modified use list if you want only loop though and access use tuple
>>> ----------------------------SET------------------------------
  File "<stdin>", line 1
    ----------------------------SET------------------------------
                                                                 ^
SyntaxError: invalid syntax
>>> #----------------------------SET------------------------------
>>> set having value unordered and unique
  File "<stdin>", line 1
    set having value unordered and unique
        ^^^^^^
SyntaxError: invalid syntax
>>> #set having value unordered and unique
>>> #set having value unordered and unique use {}
>>> a={2,3,7,8}
>>> print(a)
{8, 2, 3, 7}
>>> #unordered because as we can see 8 at last in above but at first in down
>>> print(a)
{8, 2, 3, 7}
>>> print(a)
{8, 2, 3, 7}
>>> a={2,3,7,8,8}
>>> print(a)
{8, 2, 3, 7}
>>> #still having 1 '8' as not support duplicate value
>>> #main functionality of sets to check what value other sets share or not
>>> a={2,3,7,9,10}
>>> b={2,3,7,11,10}
>>> #to see what number in common we use inetrsection metthod
>>> print(a.intersection(b))
{10, 2, 3, 7}
>>> #to see what in b but not in a we use difference method
>>> print(a.difference(b))
{9}
>>> #if want to combine and print all of courses
>>> print(a.union(b))
{2, 3, 7, 9, 10, 11}
>>> #------------------------------how to create empty list tuple sets-----------------
>>> a=[]
>>> a=list[]
  File "<stdin>", line 1
    a=list[]
           ^
SyntaxError: invalid syntax
>>> a=list()
>>> a=()
>>> a=tuple()
>>> a={}
>>> a=set{}
  File "<stdin>", line 1
    a=set{}
         ^
SyntaxError: invalid syntax
>>> a=set()
>>> #way to create empty list




























